// automatically generated by the FlatBuffers compiler, do not modify

package system

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Pipe struct {
	_tab flatbuffers.Table
}

func GetRootAsPipe(buf []byte, offset flatbuffers.UOffsetT) *Pipe {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Pipe{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Pipe) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Pipe) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Pipe) Id(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Pipe) IdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Pipe) Join() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Pipe) MutateJoin(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Pipe) Next(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Pipe) NextLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PipeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PipeAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func PipeStartIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PipeAddJoin(builder *flatbuffers.Builder, join byte) {
	builder.PrependByteSlot(1, join, 0)
}
func PipeAddNext(builder *flatbuffers.Builder, next flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(next), 0)
}
func PipeStartNextVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PipeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
