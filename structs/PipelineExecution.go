// automatically generated by the FlatBuffers compiler, do not modify

package structs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PipelineExecution struct {
	_tab flatbuffers.Table
}

func GetRootAsPipelineExecution(buf []byte, offset flatbuffers.UOffsetT) *PipelineExecution {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PipelineExecution{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PipelineExecution) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PipelineExecution) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PipelineExecution) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PipelineExecution) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *PipelineExecution) PipelineId(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PipelineExecution) PipelineIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PipelineExecution) User(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PipelineExecution) UserLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PipelineExecution) Stages(obj *FuncExecution, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PipelineExecution) StagesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PipelineExecution) Start() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PipelineExecution) MutateStart(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *PipelineExecution) End() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PipelineExecution) MutateEnd(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *PipelineExecution) Duration() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PipelineExecution) MutateDuration(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func PipelineExecutionStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func PipelineExecutionAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func PipelineExecutionAddPipelineId(builder *flatbuffers.Builder, pipelineId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pipelineId), 0)
}
func PipelineExecutionStartPipelineIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PipelineExecutionAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(user), 0)
}
func PipelineExecutionStartUserVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PipelineExecutionAddStages(builder *flatbuffers.Builder, stages flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(stages), 0)
}
func PipelineExecutionStartStagesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PipelineExecutionAddStart(builder *flatbuffers.Builder, start uint64) {
	builder.PrependUint64Slot(4, start, 0)
}
func PipelineExecutionAddEnd(builder *flatbuffers.Builder, end uint64) {
	builder.PrependUint64Slot(5, end, 0)
}
func PipelineExecutionAddDuration(builder *flatbuffers.Builder, duration uint64) {
	builder.PrependUint64Slot(6, duration, 0)
}
func PipelineExecutionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
