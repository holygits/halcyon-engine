// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package libcontainer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	configs "github.com/opencontainers/runc/libcontainer/configs"
	os "os"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer(in *jlexer.Lexer, out *process) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Args = append(out.Args, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]string, 0, 4)
					} else {
						out.Env = []string{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Env = append(out.Env, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "User":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer(out *jwriter.Writer, in process) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Args {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Env\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Env == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Env {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"User\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v process) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v process) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *process) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *process) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer(l, v)
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer1(in *jlexer.Lexer, out *config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "no_pivot_root":
			out.NoPivotRoot = bool(in.Bool())
		case "rootfs":
			out.Rootfs = string(in.String())
		case "readonlyfs":
			out.Readonlyfs = bool(in.Bool())
		case "mounts":
			if in.IsNull() {
				in.Skip()
				out.Mounts = nil
			} else {
				in.Delim('[')
				if out.Mounts == nil {
					if !in.IsDelim(']') {
						out.Mounts = make([]*configs.Mount, 0, 8)
					} else {
						out.Mounts = []*configs.Mount{}
					}
				} else {
					out.Mounts = (out.Mounts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *configs.Mount
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(configs.Mount)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs(in, &*v7)
					}
					out.Mounts = append(out.Mounts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*configs.Device, 0, 8)
					} else {
						out.Devices = []*configs.Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *configs.Device
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(configs.Device)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(in, &*v8)
					}
					out.Devices = append(out.Devices, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hostname":
			out.Hostname = string(in.String())
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make(configs.Namespaces, 0, 2)
					} else {
						out.Namespaces = configs.Namespaces{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v9 configs.Namespace
					easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs2(in, &v9)
					out.Namespaces = append(out.Namespaces, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				if out.Capabilities == nil {
					out.Capabilities = new(capabilities)
				}
				(*out.Capabilities).UnmarshalEasyJSON(in)
			}
		case "cgroups":
			if in.IsNull() {
				in.Skip()
				out.Cgroups = nil
			} else {
				if out.Cgroups == nil {
					out.Cgroups = new(configs.Cgroup)
				}
				easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs3(in, &*out.Cgroups)
			}
		case "rlimits":
			if in.IsNull() {
				in.Skip()
				out.Rlimits = nil
			} else {
				in.Delim('[')
				if out.Rlimits == nil {
					if !in.IsDelim(']') {
						out.Rlimits = make([]configs.Rlimit, 0, 2)
					} else {
						out.Rlimits = []configs.Rlimit{}
					}
				} else {
					out.Rlimits = (out.Rlimits)[:0]
				}
				for !in.IsDelim(']') {
					var v10 configs.Rlimit
					easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs4(in, &v10)
					out.Rlimits = append(out.Rlimits, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mask_paths":
			if in.IsNull() {
				in.Skip()
				out.MaskPaths = nil
			} else {
				in.Delim('[')
				if out.MaskPaths == nil {
					if !in.IsDelim(']') {
						out.MaskPaths = make([]string, 0, 4)
					} else {
						out.MaskPaths = []string{}
					}
				} else {
					out.MaskPaths = (out.MaskPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.MaskPaths = append(out.MaskPaths, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "readonly_paths":
			if in.IsNull() {
				in.Skip()
				out.ReadonlyPaths = nil
			} else {
				in.Delim('[')
				if out.ReadonlyPaths == nil {
					if !in.IsDelim(']') {
						out.ReadonlyPaths = make([]string, 0, 4)
					} else {
						out.ReadonlyPaths = []string{}
					}
				} else {
					out.ReadonlyPaths = (out.ReadonlyPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.ReadonlyPaths = append(out.ReadonlyPaths, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uid_mappings":
			if in.IsNull() {
				in.Skip()
				out.UIDMappings = nil
			} else {
				in.Delim('[')
				if out.UIDMappings == nil {
					if !in.IsDelim(']') {
						out.UIDMappings = make([]configs.IDMap, 0, 2)
					} else {
						out.UIDMappings = []configs.IDMap{}
					}
				} else {
					out.UIDMappings = (out.UIDMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v13 configs.IDMap
					easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs5(in, &v13)
					out.UIDMappings = append(out.UIDMappings, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gid_mappings":
			if in.IsNull() {
				in.Skip()
				out.GIDMappings = nil
			} else {
				in.Delim('[')
				if out.GIDMappings == nil {
					if !in.IsDelim(']') {
						out.GIDMappings = make([]configs.IDMap, 0, 2)
					} else {
						out.GIDMappings = []configs.IDMap{}
					}
				} else {
					out.GIDMappings = (out.GIDMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v14 configs.IDMap
					easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs5(in, &v14)
					out.GIDMappings = append(out.GIDMappings, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer1(out *jwriter.Writer, in config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"no_pivot_root\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NoPivotRoot))
	}
	{
		const prefix string = ",\"rootfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rootfs))
	}
	{
		const prefix string = ",\"readonlyfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Readonlyfs))
	}
	{
		const prefix string = ",\"mounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Mounts {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs(out, *v16)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"devices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Devices {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"namespaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Namespaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Namespaces {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs2(out, v20)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"capabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Capabilities == nil {
			out.RawString("null")
		} else {
			(*in.Capabilities).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"cgroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Cgroups == nil {
			out.RawString("null")
		} else {
			easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs3(out, *in.Cgroups)
		}
	}
	if len(in.Rlimits) != 0 {
		const prefix string = ",\"rlimits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Rlimits {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs4(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mask_paths\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MaskPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.MaskPaths {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"readonly_paths\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ReadonlyPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.ReadonlyPaths {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"uid_mappings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UIDMappings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.UIDMappings {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs5(out, v28)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"gid_mappings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.GIDMappings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.GIDMappings {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs5(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer1(l, v)
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs5(in *jlexer.Lexer, out *configs.IDMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "container_id":
			out.ContainerID = int(in.Int())
		case "host_id":
			out.HostID = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs5(out *jwriter.Writer, in configs.IDMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"container_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ContainerID))
	}
	{
		const prefix string = ",\"host_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HostID))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs4(in *jlexer.Lexer, out *configs.Rlimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "hard":
			out.Hard = uint64(in.Uint64())
		case "soft":
			out.Soft = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs4(out *jwriter.Writer, in configs.Rlimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"hard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Hard))
	}
	{
		const prefix string = ",\"soft\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Soft))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs3(in *jlexer.Lexer, out *configs.Cgroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Resources = new(configs.Resources)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "parent":
			out.Parent = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "scope_prefix":
			out.ScopePrefix = string(in.String())
		case "Paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Paths = make(map[string]string)
				} else {
					out.Paths = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 string
					v31 = string(in.String())
					(out.Paths)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "allow_all_devices":
			if in.IsNull() {
				in.Skip()
				out.AllowAllDevices = nil
			} else {
				if out.AllowAllDevices == nil {
					out.AllowAllDevices = new(bool)
				}
				*out.AllowAllDevices = bool(in.Bool())
			}
		case "allowed_devices":
			if in.IsNull() {
				in.Skip()
				out.AllowedDevices = nil
			} else {
				in.Delim('[')
				if out.AllowedDevices == nil {
					if !in.IsDelim(']') {
						out.AllowedDevices = make([]*configs.Device, 0, 8)
					} else {
						out.AllowedDevices = []*configs.Device{}
					}
				} else {
					out.AllowedDevices = (out.AllowedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *configs.Device
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(configs.Device)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(in, &*v32)
					}
					out.AllowedDevices = append(out.AllowedDevices, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "denied_devices":
			if in.IsNull() {
				in.Skip()
				out.DeniedDevices = nil
			} else {
				in.Delim('[')
				if out.DeniedDevices == nil {
					if !in.IsDelim(']') {
						out.DeniedDevices = make([]*configs.Device, 0, 8)
					} else {
						out.DeniedDevices = []*configs.Device{}
					}
				} else {
					out.DeniedDevices = (out.DeniedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v33 *configs.Device
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(configs.Device)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(in, &*v33)
					}
					out.DeniedDevices = append(out.DeniedDevices, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*configs.Device, 0, 8)
					} else {
						out.Devices = []*configs.Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *configs.Device
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(configs.Device)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(in, &*v34)
					}
					out.Devices = append(out.Devices, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "memory":
			out.Memory = int64(in.Int64())
		case "memory_reservation":
			out.MemoryReservation = int64(in.Int64())
		case "memory_swap":
			out.MemorySwap = int64(in.Int64())
		case "kernel_memory":
			out.KernelMemory = int64(in.Int64())
		case "kernel_memory_tcp":
			out.KernelMemoryTCP = int64(in.Int64())
		case "cpu_shares":
			out.CpuShares = uint64(in.Uint64())
		case "cpu_quota":
			out.CpuQuota = int64(in.Int64())
		case "cpu_period":
			out.CpuPeriod = uint64(in.Uint64())
		case "cpu_rt_quota":
			out.CpuRtRuntime = int64(in.Int64())
		case "cpu_rt_period":
			out.CpuRtPeriod = uint64(in.Uint64())
		case "cpuset_cpus":
			out.CpusetCpus = string(in.String())
		case "cpuset_mems":
			out.CpusetMems = string(in.String())
		case "pids_limit":
			out.PidsLimit = int64(in.Int64())
		case "blkio_weight":
			out.BlkioWeight = uint16(in.Uint16())
		case "blkio_leaf_weight":
			out.BlkioLeafWeight = uint16(in.Uint16())
		case "blkio_weight_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioWeightDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioWeightDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioWeightDevice = make([]*configs.WeightDevice, 0, 8)
					} else {
						out.BlkioWeightDevice = []*configs.WeightDevice{}
					}
				} else {
					out.BlkioWeightDevice = (out.BlkioWeightDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *configs.WeightDevice
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(configs.WeightDevice)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs6(in, &*v35)
					}
					out.BlkioWeightDevice = append(out.BlkioWeightDevice, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_read_bps_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleReadBpsDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleReadBpsDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleReadBpsDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleReadBpsDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleReadBpsDevice = (out.BlkioThrottleReadBpsDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v36 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(configs.ThrottleDevice)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(in, &*v36)
					}
					out.BlkioThrottleReadBpsDevice = append(out.BlkioThrottleReadBpsDevice, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_write_bps_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleWriteBpsDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleWriteBpsDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleWriteBpsDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleWriteBpsDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleWriteBpsDevice = (out.BlkioThrottleWriteBpsDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(configs.ThrottleDevice)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(in, &*v37)
					}
					out.BlkioThrottleWriteBpsDevice = append(out.BlkioThrottleWriteBpsDevice, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_read_iops_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleReadIOPSDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleReadIOPSDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleReadIOPSDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleReadIOPSDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleReadIOPSDevice = (out.BlkioThrottleReadIOPSDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(configs.ThrottleDevice)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(in, &*v38)
					}
					out.BlkioThrottleReadIOPSDevice = append(out.BlkioThrottleReadIOPSDevice, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_write_iops_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleWriteIOPSDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleWriteIOPSDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleWriteIOPSDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleWriteIOPSDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleWriteIOPSDevice = (out.BlkioThrottleWriteIOPSDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v39 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v39 = nil
					} else {
						if v39 == nil {
							v39 = new(configs.ThrottleDevice)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(in, &*v39)
					}
					out.BlkioThrottleWriteIOPSDevice = append(out.BlkioThrottleWriteIOPSDevice, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "freezer":
			out.Freezer = configs.FreezerState(in.String())
		case "hugetlb_limit":
			if in.IsNull() {
				in.Skip()
				out.HugetlbLimit = nil
			} else {
				in.Delim('[')
				if out.HugetlbLimit == nil {
					if !in.IsDelim(']') {
						out.HugetlbLimit = make([]*configs.HugepageLimit, 0, 8)
					} else {
						out.HugetlbLimit = []*configs.HugepageLimit{}
					}
				} else {
					out.HugetlbLimit = (out.HugetlbLimit)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *configs.HugepageLimit
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(configs.HugepageLimit)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs8(in, &*v40)
					}
					out.HugetlbLimit = append(out.HugetlbLimit, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oom_kill_disable":
			out.OomKillDisable = bool(in.Bool())
		case "memory_swappiness":
			if in.IsNull() {
				in.Skip()
				out.MemorySwappiness = nil
			} else {
				if out.MemorySwappiness == nil {
					out.MemorySwappiness = new(uint64)
				}
				*out.MemorySwappiness = uint64(in.Uint64())
			}
		case "net_prio_ifpriomap":
			if in.IsNull() {
				in.Skip()
				out.NetPrioIfpriomap = nil
			} else {
				in.Delim('[')
				if out.NetPrioIfpriomap == nil {
					if !in.IsDelim(']') {
						out.NetPrioIfpriomap = make([]*configs.IfPrioMap, 0, 8)
					} else {
						out.NetPrioIfpriomap = []*configs.IfPrioMap{}
					}
				} else {
					out.NetPrioIfpriomap = (out.NetPrioIfpriomap)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *configs.IfPrioMap
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(configs.IfPrioMap)
						}
						easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs9(in, &*v41)
					}
					out.NetPrioIfpriomap = append(out.NetPrioIfpriomap, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "net_cls_classid_u":
			out.NetClsClassid = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs3(out *jwriter.Writer, in configs.Cgroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Parent != "" {
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parent))
	}
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"scope_prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScopePrefix))
	}
	{
		const prefix string = ",\"Paths\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Paths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.Paths {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v42Name))
				out.RawByte(':')
				out.String(string(v42Value))
			}
			out.RawByte('}')
		}
	}
	if in.AllowAllDevices != nil {
		const prefix string = ",\"allow_all_devices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AllowAllDevices))
	}
	if len(in.AllowedDevices) != 0 {
		const prefix string = ",\"allowed_devices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.AllowedDevices {
				if v43 > 0 {
					out.RawByte(',')
				}
				if v44 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(out, *v44)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DeniedDevices) != 0 {
		const prefix string = ",\"denied_devices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.DeniedDevices {
				if v45 > 0 {
					out.RawByte(',')
				}
				if v46 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(out, *v46)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"devices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Devices {
				if v47 > 0 {
					out.RawByte(',')
				}
				if v48 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(out, *v48)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Memory))
	}
	{
		const prefix string = ",\"memory_reservation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemoryReservation))
	}
	{
		const prefix string = ",\"memory_swap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MemorySwap))
	}
	{
		const prefix string = ",\"kernel_memory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KernelMemory))
	}
	{
		const prefix string = ",\"kernel_memory_tcp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KernelMemoryTCP))
	}
	{
		const prefix string = ",\"cpu_shares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CpuShares))
	}
	{
		const prefix string = ",\"cpu_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CpuQuota))
	}
	{
		const prefix string = ",\"cpu_period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CpuPeriod))
	}
	{
		const prefix string = ",\"cpu_rt_quota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CpuRtRuntime))
	}
	{
		const prefix string = ",\"cpu_rt_period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CpuRtPeriod))
	}
	{
		const prefix string = ",\"cpuset_cpus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CpusetCpus))
	}
	{
		const prefix string = ",\"cpuset_mems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CpusetMems))
	}
	{
		const prefix string = ",\"pids_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PidsLimit))
	}
	{
		const prefix string = ",\"blkio_weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.BlkioWeight))
	}
	{
		const prefix string = ",\"blkio_leaf_weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.BlkioLeafWeight))
	}
	{
		const prefix string = ",\"blkio_weight_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BlkioWeightDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.BlkioWeightDevice {
				if v49 > 0 {
					out.RawByte(',')
				}
				if v50 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs6(out, *v50)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blkio_throttle_read_bps_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BlkioThrottleReadBpsDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.BlkioThrottleReadBpsDevice {
				if v51 > 0 {
					out.RawByte(',')
				}
				if v52 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(out, *v52)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blkio_throttle_write_bps_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BlkioThrottleWriteBpsDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.BlkioThrottleWriteBpsDevice {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(out, *v54)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blkio_throttle_read_iops_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BlkioThrottleReadIOPSDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.BlkioThrottleReadIOPSDevice {
				if v55 > 0 {
					out.RawByte(',')
				}
				if v56 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(out, *v56)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blkio_throttle_write_iops_device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.BlkioThrottleWriteIOPSDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.BlkioThrottleWriteIOPSDevice {
				if v57 > 0 {
					out.RawByte(',')
				}
				if v58 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(out, *v58)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"freezer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Freezer))
	}
	{
		const prefix string = ",\"hugetlb_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.HugetlbLimit == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.HugetlbLimit {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs8(out, *v60)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"oom_kill_disable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OomKillDisable))
	}
	{
		const prefix string = ",\"memory_swappiness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MemorySwappiness == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.MemorySwappiness))
		}
	}
	{
		const prefix string = ",\"net_prio_ifpriomap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.NetPrioIfpriomap == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.NetPrioIfpriomap {
				if v61 > 0 {
					out.RawByte(',')
				}
				if v62 == nil {
					out.RawString("null")
				} else {
					easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs9(out, *v62)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"net_cls_classid_u\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NetClsClassid))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs9(in *jlexer.Lexer, out *configs.IfPrioMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interface":
			out.Interface = string(in.String())
		case "priority":
			out.Priority = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs9(out *jwriter.Writer, in configs.IfPrioMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"interface\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Interface))
	}
	{
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Priority))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs8(in *jlexer.Lexer, out *configs.HugepageLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page_size":
			out.Pagesize = string(in.String())
		case "limit":
			out.Limit = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs8(out *jwriter.Writer, in configs.HugepageLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pagesize))
	}
	{
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Limit))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(in *jlexer.Lexer, out *configs.ThrottleDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rate":
			out.Rate = uint64(in.Uint64())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs7(out *jwriter.Writer, in configs.ThrottleDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Rate))
	}
	{
		const prefix string = ",\"major\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Major))
	}
	{
		const prefix string = ",\"minor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Minor))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs6(in *jlexer.Lexer, out *configs.WeightDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = uint16(in.Uint16())
		case "leafWeight":
			out.LeafWeight = uint16(in.Uint16())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs6(out *jwriter.Writer, in configs.WeightDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Weight))
	}
	{
		const prefix string = ",\"leafWeight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.LeafWeight))
	}
	{
		const prefix string = ",\"major\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Major))
	}
	{
		const prefix string = ",\"minor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Minor))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs2(in *jlexer.Lexer, out *configs.Namespace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = configs.NamespaceType(in.String())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs2(out *jwriter.Writer, in configs.Namespace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(in *jlexer.Lexer, out *configs.Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int32(in.Int32())
		case "path":
			out.Path = string(in.String())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		case "permissions":
			out.Permissions = string(in.String())
		case "file_mode":
			out.FileMode = os.FileMode(in.Uint32())
		case "uid":
			out.Uid = uint32(in.Uint32())
		case "gid":
			out.Gid = uint32(in.Uint32())
		case "allow":
			out.Allow = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs1(out *jwriter.Writer, in configs.Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Type))
	}
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"major\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Major))
	}
	{
		const prefix string = ",\"minor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Minor))
	}
	{
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Permissions))
	}
	{
		const prefix string = ",\"file_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.FileMode))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Uid))
	}
	{
		const prefix string = ",\"gid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Gid))
	}
	{
		const prefix string = ",\"allow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Allow))
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs(in *jlexer.Lexer, out *configs.Mount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "device":
			out.Device = string(in.String())
		case "flags":
			out.Flags = int(in.Int())
		case "propagation_flags":
			if in.IsNull() {
				in.Skip()
				out.PropagationFlags = nil
			} else {
				in.Delim('[')
				if out.PropagationFlags == nil {
					if !in.IsDelim(']') {
						out.PropagationFlags = make([]int, 0, 8)
					} else {
						out.PropagationFlags = []int{}
					}
				} else {
					out.PropagationFlags = (out.PropagationFlags)[:0]
				}
				for !in.IsDelim(']') {
					var v63 int
					v63 = int(in.Int())
					out.PropagationFlags = append(out.PropagationFlags, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "relabel":
			out.Relabel = string(in.String())
		case "extensions":
			out.Extensions = int(in.Int())
		case "premount_cmds":
			if in.IsNull() {
				in.Skip()
				out.PremountCmds = nil
			} else {
				in.Delim('[')
				if out.PremountCmds == nil {
					if !in.IsDelim(']') {
						out.PremountCmds = make([]configs.Command, 0, 1)
					} else {
						out.PremountCmds = []configs.Command{}
					}
				} else {
					out.PremountCmds = (out.PremountCmds)[:0]
				}
				for !in.IsDelim(']') {
					var v64 configs.Command
					easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs10(in, &v64)
					out.PremountCmds = append(out.PremountCmds, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "postmount_cmds":
			if in.IsNull() {
				in.Skip()
				out.PostmountCmds = nil
			} else {
				in.Delim('[')
				if out.PostmountCmds == nil {
					if !in.IsDelim(']') {
						out.PostmountCmds = make([]configs.Command, 0, 1)
					} else {
						out.PostmountCmds = []configs.Command{}
					}
				} else {
					out.PostmountCmds = (out.PostmountCmds)[:0]
				}
				for !in.IsDelim(']') {
					var v65 configs.Command
					easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs10(in, &v65)
					out.PostmountCmds = append(out.PostmountCmds, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs(out *jwriter.Writer, in configs.Mount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"destination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Device))
	}
	{
		const prefix string = ",\"flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"propagation_flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PropagationFlags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.PropagationFlags {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v67))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"relabel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Relabel))
	}
	{
		const prefix string = ",\"extensions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Extensions))
	}
	{
		const prefix string = ",\"premount_cmds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PremountCmds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.PremountCmds {
				if v68 > 0 {
					out.RawByte(',')
				}
				easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs10(out, v69)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"postmount_cmds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PostmountCmds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v70, v71 := range in.PostmountCmds {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs10(out, v71)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs10(in *jlexer.Lexer, out *configs.Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v72 string
					v72 = string(in.String())
					out.Args = append(out.Args, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]string, 0, 4)
					} else {
						out.Env = []string{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.Env = append(out.Env, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dir":
			out.Dir = string(in.String())
		case "timeout":
			if in.IsNull() {
				in.Skip()
				out.Timeout = nil
			} else {
				if out.Timeout == nil {
					out.Timeout = new(time.Duration)
				}
				*out.Timeout = time.Duration(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineVendorGithubComOpencontainersRuncLibcontainerConfigs10(out *jwriter.Writer, in configs.Command) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Args {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"env\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Env == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.Env {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.String(string(v77))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Dir))
	}
	{
		const prefix string = ",\"timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Timeout == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Timeout))
		}
	}
	out.RawByte('}')
}
func easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer2(in *jlexer.Lexer, out *capabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bounding":
			if in.IsNull() {
				in.Skip()
				out.Bounding = nil
			} else {
				in.Delim('[')
				if out.Bounding == nil {
					if !in.IsDelim(']') {
						out.Bounding = make([]string, 0, 4)
					} else {
						out.Bounding = []string{}
					}
				} else {
					out.Bounding = (out.Bounding)[:0]
				}
				for !in.IsDelim(']') {
					var v78 string
					v78 = string(in.String())
					out.Bounding = append(out.Bounding, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Effective":
			if in.IsNull() {
				in.Skip()
				out.Effective = nil
			} else {
				in.Delim('[')
				if out.Effective == nil {
					if !in.IsDelim(']') {
						out.Effective = make([]string, 0, 4)
					} else {
						out.Effective = []string{}
					}
				} else {
					out.Effective = (out.Effective)[:0]
				}
				for !in.IsDelim(']') {
					var v79 string
					v79 = string(in.String())
					out.Effective = append(out.Effective, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Inheritable":
			if in.IsNull() {
				in.Skip()
				out.Inheritable = nil
			} else {
				in.Delim('[')
				if out.Inheritable == nil {
					if !in.IsDelim(']') {
						out.Inheritable = make([]string, 0, 4)
					} else {
						out.Inheritable = []string{}
					}
				} else {
					out.Inheritable = (out.Inheritable)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.Inheritable = append(out.Inheritable, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Permitted":
			if in.IsNull() {
				in.Skip()
				out.Permitted = nil
			} else {
				in.Delim('[')
				if out.Permitted == nil {
					if !in.IsDelim(']') {
						out.Permitted = make([]string, 0, 4)
					} else {
						out.Permitted = []string{}
					}
				} else {
					out.Permitted = (out.Permitted)[:0]
				}
				for !in.IsDelim(']') {
					var v81 string
					v81 = string(in.String())
					out.Permitted = append(out.Permitted, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ambient":
			if in.IsNull() {
				in.Skip()
				out.Ambient = nil
			} else {
				in.Delim('[')
				if out.Ambient == nil {
					if !in.IsDelim(']') {
						out.Ambient = make([]string, 0, 4)
					} else {
						out.Ambient = []string{}
					}
				} else {
					out.Ambient = (out.Ambient)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.Ambient = append(out.Ambient, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer2(out *jwriter.Writer, in capabilities) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Bounding\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Bounding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Bounding {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.String(string(v84))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Effective\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Effective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v85, v86 := range in.Effective {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.String(string(v86))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Inheritable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Inheritable == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.Inheritable {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Permitted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Permitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Permitted {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Ambient\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Ambient == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.Ambient {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.String(string(v92))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v capabilities) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v capabilities) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson79a3de99EncodeGithubComHolygitsHalcyonEngineLibcontainer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *capabilities) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *capabilities) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson79a3de99DecodeGithubComHolygitsHalcyonEngineLibcontainer2(l, v)
}
